plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.ksp)
    alias(libs.plugins.ktlint)
    alias(libs.plugins.kotlin.serialization)
}

apply from: "$rootDir/scripts/build/utils.gradle"

def verCode, verName, verBuild, verNameShort, verPublish
(verCode, verName, verBuild, verNameShort, verPublish) = genVersion()

android {
    compileSdk = libs.versions.compileSdk.get().toInteger()
    buildToolsVersion = libs.versions.buildTools.get()

    buildFeatures {
        viewBinding true
    }

    defaultConfig {
        applicationId "com.sampleapp"
        minSdk = libs.versions.minSdk.get().toInteger()
        targetSdk = libs.versions.targetSdk.get().toInteger()
        versionCode verCode
        versionName verPublish

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        /**
         * build type with lib modules
         */
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debugMaven {
            initWith debug
            signingConfig signingConfigs.debug
            matchingFallbacks = ['debug']
        }

        /**
         * build type with lib-no-op modules
         */
        debugNoOp {
            initWith debug
            signingConfig signingConfigs.debug
            matchingFallbacks = ['debug']
        }
        debugNoOpMaven {
            initWith debug
            signingConfig signingConfigs.debug
            matchingFallbacks = ['debug']
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.toVersion(libs.versions.java.get())
        targetCompatibility = JavaVersion.toVersion(libs.versions.java.get())
    }

    kotlinOptions {
        jvmTarget = libs.versions.java.get()
    }
    namespace 'com.sampleapp'
}

dependencies {
    /* Local Op dependencies */
    debugImplementation project(path: ':pluto:lib')
    debugImplementation project(path: ':pluto-plugins:bundle:lib')

    /* Maven Op dependencies */
    debugMavenImplementation "com.plutolib:pluto:$verPublish"
    debugMavenImplementation "com.plutolib.plugins:bundle-core:$verPublish"

    /* Local NoOp dependencies */
    debugNoOpImplementation project(path: ':pluto:lib-no-op')
    debugNoOpImplementation project(path: ':pluto-plugins:bundle:lib-no-op')

    /* Maven NoOp dependencies */
    debugNoOpMavenImplementation "com.plutolib:pluto-no-op:$verPublish"
    debugNoOpMavenImplementation "com.plutolib.plugins:bundle-core-no-op:$verPublish"

    releaseImplementation "com.plutolib:pluto:$verPublish"
    releaseImplementation "com.plutolib.plugins:bundle-core:$verPublish"

    /**
     * Other dependencies
     */
    implementation(libs.kotlin.stdlib.jdk8)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.core)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.google.material)
    implementation(libs.androidx.annotation)

    implementation(libs.androidx.lifecycle.common)
    implementation(libs.androidx.lifecycle.viewmodel)
    implementation(libs.androidx.lifecycle.livedata)
    implementation(libs.androidx.lifecycle.runtime)

    implementation(libs.kotlinx.coroutines.core)

    /**
     * Network plugin test dependency
     */
    implementation(libs.retrofit)
    implementation(libs.retrofit.converter.moshi)
    implementation(libs.okhttp.logging.interceptor)

    implementation(libs.ktor.client.core.jvm)
    implementation(libs.ktor.client.android)
    implementation(libs.ktor.client.content.negotiation)
    implementation(libs.ktor.client.content.negotiation)
    implementation(libs.ktor.serialization.kotlinx.json)
    implementation(libs.kotlinx.serialization.json)

    implementation(libs.okhttp)
    implementation(libs.okio)

    implementation(libs.moshi)
    ksp(libs.moshi.codegen)

    implementation(libs.datastore.preferences)
    debugImplementation(libs.leakcanary.android)

    implementation(libs.androidx.navigation.fragment)

    implementation(libs.room)
    ksp(libs.room.compiler)
}
